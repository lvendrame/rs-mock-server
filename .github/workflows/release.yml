name: Release

on:
    release:
        types: [published]

permissions:
    contents: write

env:
    CARGO_TERM_COLOR: always

jobs:
    build:
        name: Build ${{ matrix.target }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      artifact_extension: tar.gz
                      binary_name: rs-mock-server
                    - os: macos-latest
                      target: x86_64-apple-darwin
                      artifact_extension: tar.gz
                      binary_name: rs-mock-server
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact_extension: zip
                      binary_name: rs-mock-server.exe
        env:
            RELEASE_VERSION: ${{ github.event.release.tag_name }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Build release binary
              run: cargo build --release --locked

            - name: Package archive (Unix)
              if: runner.os != 'Windows'
              id: package-unix
              run: |
                  set -euxo pipefail
                  PACKAGE_NAME="rs-mock-server-${RELEASE_VERSION}-${{ matrix.target }}"
                  mkdir -p dist
                  STAGING="dist/$PACKAGE_NAME"
                  mkdir -p "$STAGING"
                  cp "target/release/${{ matrix.binary_name }}" "$STAGING/"
                  if [ -f README.md ]; then cp README.md "$STAGING/"; fi
                  tar -C dist -czf "$PACKAGE_NAME.${{ matrix.artifact_extension }}" "$PACKAGE_NAME"
                  echo "archive-name=$PACKAGE_NAME.${{ matrix.artifact_extension }}" >> "$GITHUB_OUTPUT"
                  echo "archive-path=$PACKAGE_NAME.${{ matrix.artifact_extension }}" >> "$GITHUB_OUTPUT"

            - name: Package archive (Windows)
              if: runner.os == 'Windows'
              id: package-windows
              shell: pwsh
              run: |
                  $ErrorActionPreference = "Stop"
                  $packageName = "rs-mock-server-$env:RELEASE_VERSION-${{ matrix.target }}"
                  New-Item -ItemType Directory -Path "dist" -Force | Out-Null
                  $staging = Join-Path "dist" $packageName
                  New-Item -ItemType Directory -Path $staging -Force | Out-Null
                  Copy-Item "target\release\${{ matrix.binary_name }}" -Destination $staging -Force
                  if (Test-Path "README.md") { Copy-Item "README.md" -Destination $staging -Force }
                  $archiveName = "$packageName.${{ matrix.artifact_extension }}"
                  Compress-Archive -Path "$staging\*" -DestinationPath $archiveName -Force
                  "archive-name=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
                  "archive-path=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

            - name: Upload build artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.package-unix.outputs.archive-name || steps.package-windows.outputs.archive-name }}
                  path: ${{ steps.package-unix.outputs.archive-path || steps.package-windows.outputs.archive-path }}
                  if-no-files-found: error

    release:
        name: Publish release assets
        needs: build
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  path: dist
                  merge-multiple: true

            - name: Upload files to GitHub release
              uses: softprops/action-gh-release@v1
              with:
                  files: dist/*
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
